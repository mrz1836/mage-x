name: Fortress Benchmarks

on:
  workflow_dispatch:
    inputs:
      benchmark_time:
        description: "Benchmark duration (e.g., 1s, 10s)"
        required: false
        default: "1s"
        type: string
      enable_profiling:
        description: "Enable CPU and memory profiling"
        required: false
        default: false
        type: boolean
      packages:
        description: "Packages to benchmark (default: ./pkg/mage)"
        required: false
        default: "./pkg/mage"
        type: string
  workflow_call:
    inputs:
      benchmark_time:
        description: "Benchmark duration"
        required: false
        default: "1s"
        type: string
      enable_profiling:
        description: "Enable profiling"
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    env:
      BENCH_TIME: ${{ inputs.benchmark_time || '1s' }}
      BENCH_PACKAGES: ${{ inputs.packages || './pkg/mage' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Install Mage
        run: |
          go install github.com/magefile/mage@latest
          which mage
          mage -version

      - name: Run benchmarks
        run: |
          echo "## Running Go Benchmarks"
          echo "Benchmark time: $BENCH_TIME"
          echo "Packages: $BENCH_PACKAGES"
          echo ""

          # Run benchmarks on specific packages with shorter duration
          go test -bench=. -benchmem -run=^$ -benchtime=$BENCH_TIME $BENCH_PACKAGES | tee benchmark-results.txt

          # Show summary
          echo ""
          echo "### Summary"
          grep -E "^Benchmark" benchmark-results.txt | head -20 || echo "No benchmark results found"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark-results.txt
          retention-days: 7

  benchmark-comparison:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      BENCH_TIME: ${{ inputs.benchmark_time || '1s' }}
      BENCH_PACKAGES: ${{ inputs.packages || './pkg/mage' }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Install tools
        run: |
          go install github.com/magefile/mage@latest
          go install golang.org/x/perf/cmd/benchstat@latest

      - name: Run benchmarks on PR branch
        run: |
          go test -bench=. -benchmem -run=^$ -benchtime=$BENCH_TIME $BENCH_PACKAGES > pr-benchmarks.txt

      - name: Checkout base branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.base_ref }}

      - name: Run benchmarks on base branch
        run: |
          go test -bench=. -benchmem -run=^$ -benchtime=$BENCH_TIME $BENCH_PACKAGES > base-benchmarks.txt

      - name: Compare benchmarks
        run: |
          echo "## Benchmark Comparison"
          echo "Comparing PR branch against base branch (${{ github.base_ref }}):"
          echo "Packages: $BENCH_PACKAGES"
          echo ""
          benchstat base-benchmarks.txt pr-benchmarks.txt || echo "No significant differences found"

      - name: Upload comparison results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-comparison
          path: |
            pr-benchmarks.txt
            base-benchmarks.txt
          retention-days: 7

  profile-cpu:
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_profiling == true || inputs.enable_profiling == 'true' }}
    continue-on-error: true
    env:
      BENCH_TIME: ${{ inputs.benchmark_time || '1s' }}
      BENCH_PACKAGES: ${{ inputs.packages || './pkg/mage' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Install profiling tools
        run: |
          go install github.com/google/pprof@latest

      - name: Run CPU profiling
        run: |
          echo "## CPU Profiling"
          echo "Running benchmarks with CPU profiling on: $BENCH_PACKAGES"

          # Run benchmarks with CPU profiling on specific packages
          go test -bench=. -benchtime=$BENCH_TIME -cpuprofile=cpu.prof $BENCH_PACKAGES || echo "CPU profiling completed"

          if [ -f cpu.prof ]; then
            echo "### Top CPU consumers:"
            go tool pprof -top -nodecount=10 cpu.prof || echo "Could not analyze CPU profile"
          fi

      - name: Upload CPU profile
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cpu-profile
          path: cpu.prof
          retention-days: 7

  profile-memory:
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_profiling == true || inputs.enable_profiling == 'true' }}
    continue-on-error: true
    env:
      BENCH_TIME: ${{ inputs.benchmark_time || '1s' }}
      BENCH_PACKAGES: ${{ inputs.packages || './pkg/mage' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Run memory profiling
        run: |
          echo "## Memory Profiling"
          echo "Running benchmarks with memory profiling on: $BENCH_PACKAGES"

          # Run benchmarks with memory profiling on specific packages
          go test -bench=. -benchtime=$BENCH_TIME -memprofile=mem.prof $BENCH_PACKAGES || echo "Memory profiling completed"

          if [ -f mem.prof ]; then
            echo "### Top memory allocators:"
            go tool pprof -top -nodecount=10 mem.prof || echo "Could not analyze memory profile"
          fi

      - name: Upload memory profile
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: memory-profile
          path: mem.prof
          retention-days: 7

  summary:
    needs: [benchmarks]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Benchmark Summary
        run: |
          echo "## Benchmark Suite Summary"
          echo ""
          echo "### Configuration:"
          echo "- Benchmark time: ${{ inputs.benchmark_time || '1s' }}"
          echo "- Packages: ${{ inputs.packages || './pkg/mage' }}"
          echo "- Profiling enabled: ${{ inputs.enable_profiling || false }}"
          echo ""
          echo "### Job Results:"
          echo "- Benchmarks: ${{ needs.benchmarks.result }}"

          if [[ "${{ inputs.enable_profiling }}" == "true" ]]; then
            echo "- CPU Profiling: Available as artifact"
            echo "- Memory Profiling: Available as artifact"
          fi

          echo ""
          if [[ "${{ needs.benchmarks.result }}" == "success" ]]; then
            echo "✅ Benchmark suite completed successfully!"
          else
            echo "⚠️ Benchmark job did not complete successfully."
          fi

          echo ""
          echo "### Performance Tips:"
          echo "- Quick benchmarks use 1s duration by default"
          echo "- Enable profiling only when investigating performance issues"
          echo "- Target specific packages to reduce execution time"
          echo "- Full benchmarks can be run manually with longer durations"
