# ------------------------------------------------------------------------------------
#  Code Quality (Reusable Workflow) (GoFortress)
#
#  Purpose: Run code quality checks including Go vet (static analysis) and
#  golangci-lint (comprehensive linting).
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Code Quality)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      go-lint-enabled:
        description: "Whether Go linting is enabled"
        required: true
        type: string
      yaml-lint-enabled:
        description: "Whether YAML linting is enabled"
        required: true
        type: string
      static-analysis-enabled:
        description: "Whether static analysis is enabled"
        required: true
        type: string
    outputs:
      golangci-lint-version:
        description: "Version of golangci-lint used in the workflow"
        value: ${{ jobs.lint.outputs.golangci-lint-version }}
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Go Vet (Static Analysis)
  # ----------------------------------------------------------------------------------
  govet:
    name: 📊 Govet (Static Analysis)
    if: ${{ inputs.static-analysis-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-

      # ————————————————————————————————————————————————————————————————
      # Set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        id: setup-go-vet
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ inputs.go-primary-version }}
          cache: false # we handle caches ourselves

      # ————————————————————————————————————————————————————————————————
      # Run go vet with parallel execution
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Go vet (parallel)
        run: |
          echo "🚀 Running static analysis with go vet (parallel mode)..."
          go vet ./...
          echo "✅ Static analysis completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Summary of Go vet results
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        run: |
          echo "## 📊 Go Vet Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Analysis Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | go vet (Official Go Static Analyzer) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution** | 🚀 Project packages only |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | ./... (excludes dependencies) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ No issues found |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **All packages passed static analysis checks.**" >> $GITHUB_STEP_SUMMARY

  # ----------------------------------------------------------------------------------
  # Lint (Code Linting)
  # ----------------------------------------------------------------------------------
  lint:
    name: ✨ Lint Code
    if: ${{ inputs.go-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      golangci-lint-version: ${{ steps.golangci-lint-version.outputs.version }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Install Mage
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Install Mage
        run: |
          echo "📦 Installing Mage..."
          go install github.com/magefile/mage@latest
          echo "✅ Mage installed successfully"

      # ————————————————————————————————————————————————————————————————
      # Extract golangci-lint version from Mage
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Extract golangci-lint version from Mage
        id: golangci-lint-version
        run: |
          # Default golangci-lint version
          VERSION="v1.55.2"
          echo "✅ Using golangci-lint version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-

      # ————————————————————————————————————————————————————————————————
      # Set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        id: setup-go-lint
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ inputs.go-primary-version }}
          cache: false

      # ————————————————————————————————————————————————————————————————
      # Restore Cache golangci-lint
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache golangci-lint analysis
        id: cache-golangci-lint
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.GOLANGCI_LINT_CACHE }}
          key: ${{ inputs.primary-runner }}-golangci-lint-analysis-${{ hashFiles('.golangci.json', '**/go.sum') }}-${{ steps.golangci-lint-version.outputs.version }}
          restore-keys: |
            ${{ inputs.primary-runner }}-golangci-lint-analysis-${{ hashFiles('.golangci.json', '**/go.sum') }}
            ${{ inputs.primary-runner }}-golangci-lint-analysis-

      - name: 🔍 Debug cache usage
        run: |
          echo "🔍 Module cache size: $(du -sh $GOMODCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Build cache size: $(du -sh $GOCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Lint cache size: $(du -sh $GOLANGCI_LINT_CACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Checking if vendor directory exists: $(ls -la | grep vendor || echo 'No vendor directory')"

      # ————————————————————————————————————————————————————————————————
      # Run golangci-lint
      # ————————————————————————————————————————————————————————————————
      - name: ✨ Run golangci-lint
        run: |
          echo "🧹 Running code linting with golangci-lint..."
          echo "💾 Golangci-lint cache location: $GOLANGCI_LINT_CACHE"
          echo "📁 Module cache path: $GOMODCACHE"

          # Export the cache directory for golangci-lint
          export GOLANGCI_LINT_CACHE=$GOLANGCI_LINT_CACHE

          # Running lint with version from Mage
          echo "🔧 Using golangci-lint version: ${{ steps.golangci-lint-version.outputs.version }}"

          # Run with mage
          mage lintDefault

          echo "✅ Code linting completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Summary of golangci-lint results
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        run: |
          echo "## ✨ Code Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Linting Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | Custom ruleset via .golangci.json |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.golangci-lint-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cache** | 💾 Analysis cache enabled |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ All checks passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Code quality standards met - no linting issues found.**" >> $GITHUB_STEP_SUMMARY

  # ----------------------------------------------------------------------------------
  # YAML Validation (Linting)
  # ----------------------------------------------------------------------------------
  yaml-lint:
    name: 📐 YAML Format Validation
    if: ${{ inputs.yaml-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      yamlfmt-version: ${{ steps.yamlfmt-version.outputs.version }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1 # Shallow fetch is sufficient for yamlfmt

      # ————————————————————————————————————————————————————————————————
      # Set up Go for yamlfmt
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        uses: actions/setup-go@c50f1e6b426a8a5e16c5d83226b1b0b0e0b17fba # v5.1.0
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          check-latest: true

      # ————————————————————————————————————————————————————————————————
      # Install yamlfmt
      # ————————————————————————————————————————————————————————————————
      - name: 📦 Install yamlfmt
        run: |
          echo "📦 Installing yamlfmt..."
          go install github.com/google/yamlfmt/cmd/yamlfmt@latest

          # Capture version for output
          YAMLFMT_VERSION=$(yamlfmt --version)
          echo "📌 yamlfmt version: $YAMLFMT_VERSION"
          echo "version=$YAMLFMT_VERSION" >> $GITHUB_OUTPUT
        id: yamlfmt-version

      # ————————————————————————————————————————————————————————————————
      # List YAML files to be checked (for transparency)
      # ————————————————————————————————————————————————————————————————
      - name: 📋 List YAML files to check
        run: |
          echo "📋 Using yamlfmt config file: .github/.yamlfmt"
          echo ""
          echo "📊 YAML files found:"
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | sort

          TOTAL_YAML=$(find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | wc -l | xargs)

          echo ""
          echo "📈 Summary:"
          echo "   • Total YAML files found: $TOTAL_YAML"

      # ————————————————————————————————————————————————————————————————
      # Run yamlfmt in dry-run mode to check formatting
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify YAML formatting
        id: yamlfmt-check
        run: |
          echo "🔍 Checking YAML file formatting with yamlfmt..."
          set +e  # Don't exit on error immediately

          if [ -f .github/.yamlfmt ]; then
            yamlfmt -conf .github/.yamlfmt -dry .
          else
            yamlfmt -dry .
          fi
          YAMLFMT_EXIT_CODE=$?

          if [ $YAMLFMT_EXIT_CODE -eq 0 ]; then
            echo "✅ All YAML files are properly formatted"
            echo "check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ YAML formatting issues detected"
            echo "check_passed=false" >> $GITHUB_OUTPUT
          fi

          exit $YAMLFMT_EXIT_CODE

      # ————————————————————————————————————————————————————————————————
      # Show detailed diff when check fails (helpful for debugging)
      # ————————————————————————————————————————————————————————————————
      - name: 📝 Show formatting diff
        if: failure() && steps.yamlfmt-check.outputs.check_passed == 'false'
        run: |
          echo "❌ YAML files not formatted according to yamlfmt configuration"
          echo ""
          echo "📋 Required formatting changes:"
          echo "================================"

          # Create a temporary directory for formatted files
          mkdir -p .formatted_yaml

          # Copy files and format them to show differences
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
            -not -path "./.git/*" \
            -not -path "./vendor/*" \
            -not -path "./node_modules/*" | while read -r file; do

            # Copy original file
            cp "$file" ".formatted_yaml/$(basename "$file").orig"

            # Format the copy
            if [ -f .github/.yamlfmt ]; then
              yamlfmt -conf .github/.yamlfmt ".formatted_yaml/$(basename "$file").orig"
            else
              yamlfmt ".formatted_yaml/$(basename "$file").orig"
            fi

            # Show diff if files differ
            if ! diff -q "$file" ".formatted_yaml/$(basename "$file").orig" >/dev/null 2>&1; then
              echo ""
              echo "📄 File: $file"
              echo "---"
              diff -u "$file" ".formatted_yaml/$(basename "$file").orig" | sed '1,2d' || true
            fi
          done

          echo ""
          echo "================================"
          echo ""
          echo "🔧 To fix these issues locally, run:"
          echo "    go install github.com/google/yamlfmt/cmd/yamlfmt@latest"
          echo "    yamlfmt -conf .github/.yamlfmt ."
          echo ""
          echo "📚 yamlfmt formatting rules:"
          echo "    • Indent style: 2 spaces"
          echo "    • Line ending: LF"
          echo "    • Max line length: 120 characters"
          echo "    • Comments preserved with proper spacing"

          # Clean up
          rm -rf .formatted_yaml

          # Exit with failure
          exit 1

      # ————————————————————————————————————————————————————————————————
      # Job Summary
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        if: success()
        run: "echo \"## 📐 YAML Validation Summary\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"| 🔍 Validation Details | ✅ Status |\" >> $GITHUB_STEP_SUMMARY\necho \"|---|---|\" >> $GITHUB_STEP_SUMMARY\necho \"| **Tool** | yamlfmt (EditorConfig-aware) |\" >> $GITHUB_STEP_SUMMARY\necho \"| **Version** | ${{ steps.yamlfmt-version.outputs.version }} |\" >> $GITHUB_STEP_SUMMARY\necho \"| **Configuration** | .editorconfig rules |\" >> $GITHUB_STEP_SUMMARY\necho \"| **Scope** | All .yml and .yaml files |\" >> $GITHUB_STEP_SUMMARY\necho \"| **Result** | ✅ All files properly formatted |\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"### 📊 File Processing Statistics\" >> $GITHUB_STEP_SUMMARY\necho \"- **Total YAML files found**: ${{ env.TOTAL_YAML }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Files processed by yamlfmt**: ${{ env.PROCESSED_YAML }}\" >> $GITHUB_STEP_SUMMARY  \necho \"- **Files needing formatting**: ${{ env.CHECKED_YAML }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Files ignored by yamlfmt**: $((${{ env.TOTAL_YAML }} - ${{ env.PROCESSED_YAML }}))\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"### 📋 EditorConfig YAML Rules Applied\" >> $GITHUB_STEP_SUMMARY\necho \"- **Indent Style**: Spaces\" >> $GITHUB_STEP_SUMMARY\necho \"- **Indent Size**: 2\" >> $GITHUB_STEP_SUMMARY\necho \"- **Line Endings**: LF\" >> $GITHUB_STEP_SUMMARY\necho \"- **Final Newline**: Required\" >> $GITHUB_STEP_SUMMARY\necho \"- **Trailing Whitespace**: Trimmed\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"🎯 **All YAML files meet formatting standards.**\" >> $GITHUB_STEP_SUMMARY\n    #magic___^_^___line\n"
      # ————————————————————————————————————————————————————————————————
      # Cleanup
      # ————————————————————————————————————————————————————————————————
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f package.json
          # Only remove node_modules if we created it (not if it was linked)
          if [ ! -L node_modules ]; then
            rm -rf node_modules
          fi
          echo "✅ Cleanup completed"
