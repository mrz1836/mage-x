// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./interfaces.go -destination=./mocks.go -package=config
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigLoader is a mock of ConfigLoader interface.
type MockConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoaderMockRecorder
	isgomock struct{}
}

// MockConfigLoaderMockRecorder is the mock recorder for MockConfigLoader.
type MockConfigLoaderMockRecorder struct {
	mock *MockConfigLoader
}

// NewMockConfigLoader creates a new mock instance.
func NewMockConfigLoader(ctrl *gomock.Controller) *MockConfigLoader {
	mock := &MockConfigLoader{ctrl: ctrl}
	mock.recorder = &MockConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigLoader) EXPECT() *MockConfigLoaderMockRecorder {
	return m.recorder
}

// GetSupportedFormats mocks base method.
func (m *MockConfigLoader) GetSupportedFormats() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFormats")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedFormats indicates an expected call of GetSupportedFormats.
func (mr *MockConfigLoaderMockRecorder) GetSupportedFormats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFormats", reflect.TypeOf((*MockConfigLoader)(nil).GetSupportedFormats))
}

// Load mocks base method.
func (m *MockConfigLoader) Load(paths []string, dest any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", paths, dest)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigLoaderMockRecorder) Load(paths, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigLoader)(nil).Load), paths, dest)
}

// LoadFrom mocks base method.
func (m *MockConfigLoader) LoadFrom(path string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFrom", path, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFrom indicates an expected call of LoadFrom.
func (mr *MockConfigLoaderMockRecorder) LoadFrom(path, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFrom", reflect.TypeOf((*MockConfigLoader)(nil).LoadFrom), path, dest)
}

// Save mocks base method.
func (m *MockConfigLoader) Save(path string, data any, format string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", path, data, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigLoaderMockRecorder) Save(path, data, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigLoader)(nil).Save), path, data, format)
}

// Validate mocks base method.
func (m *MockConfigLoader) Validate(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfigLoaderMockRecorder) Validate(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfigLoader)(nil).Validate), data)
}

// MockEnvProvider is a mock of EnvProvider interface.
type MockEnvProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEnvProviderMockRecorder
	isgomock struct{}
}

// MockEnvProviderMockRecorder is the mock recorder for MockEnvProvider.
type MockEnvProviderMockRecorder struct {
	mock *MockEnvProvider
}

// NewMockEnvProvider creates a new mock instance.
func NewMockEnvProvider(ctrl *gomock.Controller) *MockEnvProvider {
	mock := &MockEnvProvider{ctrl: ctrl}
	mock.recorder = &MockEnvProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvProvider) EXPECT() *MockEnvProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEnvProvider) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockEnvProviderMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEnvProvider)(nil).Get), key)
}

// GetAll mocks base method.
func (m *MockEnvProvider) GetAll() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEnvProviderMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEnvProvider)(nil).GetAll))
}

// GetWithDefault mocks base method.
func (m *MockEnvProvider) GetWithDefault(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithDefault", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWithDefault indicates an expected call of GetWithDefault.
func (mr *MockEnvProviderMockRecorder) GetWithDefault(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDefault", reflect.TypeOf((*MockEnvProvider)(nil).GetWithDefault), key, defaultValue)
}

// LookupEnv mocks base method.
func (m *MockEnvProvider) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockEnvProviderMockRecorder) LookupEnv(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockEnvProvider)(nil).LookupEnv), key)
}

// Set mocks base method.
func (m *MockEnvProvider) Set(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockEnvProviderMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEnvProvider)(nil).Set), key, value)
}

// Unset mocks base method.
func (m *MockEnvProvider) Unset(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockEnvProviderMockRecorder) Unset(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockEnvProvider)(nil).Unset), key)
}

// MockTypedEnvProvider is a mock of TypedEnvProvider interface.
type MockTypedEnvProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTypedEnvProviderMockRecorder
	isgomock struct{}
}

// MockTypedEnvProviderMockRecorder is the mock recorder for MockTypedEnvProvider.
type MockTypedEnvProviderMockRecorder struct {
	mock *MockTypedEnvProvider
}

// NewMockTypedEnvProvider creates a new mock instance.
func NewMockTypedEnvProvider(ctrl *gomock.Controller) *MockTypedEnvProvider {
	mock := &MockTypedEnvProvider{ctrl: ctrl}
	mock.recorder = &MockTypedEnvProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedEnvProvider) EXPECT() *MockTypedEnvProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTypedEnvProvider) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTypedEnvProviderMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTypedEnvProvider)(nil).Get), key)
}

// GetAll mocks base method.
func (m *MockTypedEnvProvider) GetAll() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTypedEnvProviderMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetAll))
}

// GetBool mocks base method.
func (m *MockTypedEnvProvider) GetBool(key string, defaultValue bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key, defaultValue)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockTypedEnvProviderMockRecorder) GetBool(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetBool), key, defaultValue)
}

// GetDuration mocks base method.
func (m *MockTypedEnvProvider) GetDuration(key string, defaultValue time.Duration) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key, defaultValue)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockTypedEnvProviderMockRecorder) GetDuration(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetDuration), key, defaultValue)
}

// GetFloat64 mocks base method.
func (m *MockTypedEnvProvider) GetFloat64(key string, defaultValue float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", key, defaultValue)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64.
func (mr *MockTypedEnvProviderMockRecorder) GetFloat64(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetFloat64), key, defaultValue)
}

// GetInt mocks base method.
func (m *MockTypedEnvProvider) GetInt(key string, defaultValue int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key, defaultValue)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockTypedEnvProviderMockRecorder) GetInt(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetInt), key, defaultValue)
}

// GetInt64 mocks base method.
func (m *MockTypedEnvProvider) GetInt64(key string, defaultValue int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", key, defaultValue)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockTypedEnvProviderMockRecorder) GetInt64(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetInt64), key, defaultValue)
}

// GetStringSlice mocks base method.
func (m *MockTypedEnvProvider) GetStringSlice(key string, defaultValue []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", key, defaultValue)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringSlice indicates an expected call of GetStringSlice.
func (mr *MockTypedEnvProviderMockRecorder) GetStringSlice(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetStringSlice), key, defaultValue)
}

// GetWithDefault mocks base method.
func (m *MockTypedEnvProvider) GetWithDefault(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithDefault", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWithDefault indicates an expected call of GetWithDefault.
func (mr *MockTypedEnvProviderMockRecorder) GetWithDefault(key, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDefault", reflect.TypeOf((*MockTypedEnvProvider)(nil).GetWithDefault), key, defaultValue)
}

// LookupEnv mocks base method.
func (m *MockTypedEnvProvider) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockTypedEnvProviderMockRecorder) LookupEnv(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockTypedEnvProvider)(nil).LookupEnv), key)
}

// Set mocks base method.
func (m *MockTypedEnvProvider) Set(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTypedEnvProviderMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTypedEnvProvider)(nil).Set), key, value)
}

// Unset mocks base method.
func (m *MockTypedEnvProvider) Unset(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockTypedEnvProviderMockRecorder) Unset(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockTypedEnvProvider)(nil).Unset), key)
}

// MockConfigSource is a mock of ConfigSource interface.
type MockConfigSource struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSourceMockRecorder
	isgomock struct{}
}

// MockConfigSourceMockRecorder is the mock recorder for MockConfigSource.
type MockConfigSourceMockRecorder struct {
	mock *MockConfigSource
}

// NewMockConfigSource creates a new mock instance.
func NewMockConfigSource(ctrl *gomock.Controller) *MockConfigSource {
	mock := &MockConfigSource{ctrl: ctrl}
	mock.recorder = &MockConfigSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSource) EXPECT() *MockConfigSourceMockRecorder {
	return m.recorder
}

// IsAvailable mocks base method.
func (m *MockConfigSource) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockConfigSourceMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockConfigSource)(nil).IsAvailable))
}

// Load mocks base method.
func (m *MockConfigSource) Load(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockConfigSourceMockRecorder) Load(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigSource)(nil).Load), dest)
}

// Name mocks base method.
func (m *MockConfigSource) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConfigSourceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfigSource)(nil).Name))
}

// Priority mocks base method.
func (m *MockConfigSource) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockConfigSourceMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockConfigSource)(nil).Priority))
}

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
	isgomock struct{}
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// AddSource mocks base method.
func (m *MockConfigManager) AddSource(source ConfigSource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSource", source)
}

// AddSource indicates an expected call of AddSource.
func (mr *MockConfigManagerMockRecorder) AddSource(source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockConfigManager)(nil).AddSource), source)
}

// GetActiveSources mocks base method.
func (m *MockConfigManager) GetActiveSources() []ConfigSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSources")
	ret0, _ := ret[0].([]ConfigSource)
	return ret0
}

// GetActiveSources indicates an expected call of GetActiveSources.
func (mr *MockConfigManagerMockRecorder) GetActiveSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSources", reflect.TypeOf((*MockConfigManager)(nil).GetActiveSources))
}

// LoadConfig mocks base method.
func (m *MockConfigManager) LoadConfig(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigManagerMockRecorder) LoadConfig(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigManager)(nil).LoadConfig), dest)
}

// Reload mocks base method.
func (m *MockConfigManager) Reload(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockConfigManagerMockRecorder) Reload(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockConfigManager)(nil).Reload), dest)
}

// StopWatching mocks base method.
func (m *MockConfigManager) StopWatching() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWatching")
}

// StopWatching indicates an expected call of StopWatching.
func (mr *MockConfigManagerMockRecorder) StopWatching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWatching", reflect.TypeOf((*MockConfigManager)(nil).StopWatching))
}

// Watch mocks base method.
func (m *MockConfigManager) Watch(callback func(any)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockConfigManagerMockRecorder) Watch(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockConfigManager)(nil).Watch), callback)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// GetValidationRules mocks base method.
func (m *MockValidator) GetValidationRules() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidationRules")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetValidationRules indicates an expected call of GetValidationRules.
func (mr *MockValidatorMockRecorder) GetValidationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationRules", reflect.TypeOf((*MockValidator)(nil).GetValidationRules))
}

// SetValidationRules mocks base method.
func (m *MockValidator) SetValidationRules(rules map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValidationRules", rules)
}

// SetValidationRules indicates an expected call of SetValidationRules.
func (mr *MockValidatorMockRecorder) SetValidationRules(rules any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidationRules", reflect.TypeOf((*MockValidator)(nil).SetValidationRules), rules)
}

// Validate mocks base method.
func (m *MockValidator) Validate(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), data)
}

// ValidateField mocks base method.
func (m *MockValidator) ValidateField(fieldName string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateField", fieldName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateField indicates an expected call of ValidateField.
func (mr *MockValidatorMockRecorder) ValidateField(fieldName, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateField", reflect.TypeOf((*MockValidator)(nil).ValidateField), fieldName, value)
}
