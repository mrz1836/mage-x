// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./interfaces.go -destination=./mocks.go -package=fileops
//

// Package fileops is a generated GoMock package.
package fileops

import (
	fs "io/fs"
	os "os"
	reflect "reflect"

	"github.com/mrz1836/mage-x/pkg/common/mockrec"
	gomock "go.uber.org/mock/gomock"
)

// MockFileOperator is a mock of FileOperator interface.
type MockFileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperatorMockRecorder
	isgomock struct{}
}

// MockFileOperatorMockRecorder is the mock recorder for MockFileOperator.
type MockFileOperatorMockRecorder struct {
	mock *MockFileOperator
}

// NewMockFileOperator creates a new mock instance.
func NewMockFileOperator(ctrl *gomock.Controller) *MockFileOperator {
	mock := &MockFileOperator{ctrl: ctrl}
	mock.recorder = &MockFileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperator) EXPECT() *MockFileOperatorMockRecorder {
	return m.recorder
}

// Chmod mocks base method.
func (m *MockFileOperator) Chmod(path string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockFileOperatorMockRecorder) Chmod(path, mode any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Chmod", reflect.TypeOf((*MockFileOperator)(nil).Chmod), path, mode)
}

// Copy mocks base method.
func (m *MockFileOperator) Copy(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockFileOperatorMockRecorder) Copy(src, dst any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Copy", reflect.TypeOf((*MockFileOperator)(nil).Copy), src, dst)
}

// Exists mocks base method.
func (m *MockFileOperator) Exists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFileOperatorMockRecorder) Exists(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Exists", reflect.TypeOf((*MockFileOperator)(nil).Exists), path)
}

// IsDir mocks base method.
func (m *MockFileOperator) IsDir(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileOperatorMockRecorder) IsDir(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "IsDir", reflect.TypeOf((*MockFileOperator)(nil).IsDir), path)
}

// MkdirAll mocks base method.
func (m *MockFileOperator) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileOperatorMockRecorder) MkdirAll(path, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "MkdirAll", reflect.TypeOf((*MockFileOperator)(nil).MkdirAll), path, perm)
}

// ReadDir mocks base method.
func (m *MockFileOperator) ReadDir(path string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileOperatorMockRecorder) ReadDir(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadDir", reflect.TypeOf((*MockFileOperator)(nil).ReadDir), path)
}

// ReadFile mocks base method.
func (m *MockFileOperator) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileOperatorMockRecorder) ReadFile(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadFile", reflect.TypeOf((*MockFileOperator)(nil).ReadFile), path)
}

// Remove mocks base method.
func (m *MockFileOperator) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileOperatorMockRecorder) Remove(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Remove", reflect.TypeOf((*MockFileOperator)(nil).Remove), path)
}

// RemoveAll mocks base method.
func (m *MockFileOperator) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileOperatorMockRecorder) RemoveAll(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "RemoveAll", reflect.TypeOf((*MockFileOperator)(nil).RemoveAll), path)
}

// Stat mocks base method.
func (m *MockFileOperator) Stat(path string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", path)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileOperatorMockRecorder) Stat(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Stat", reflect.TypeOf((*MockFileOperator)(nil).Stat), path)
}

// WriteFile mocks base method.
func (m *MockFileOperator) WriteFile(path string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileOperatorMockRecorder) WriteFile(path, data, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteFile", reflect.TypeOf((*MockFileOperator)(nil).WriteFile), path, data, perm)
}

// MockJSONOperator is a mock of JSONOperator interface.
type MockJSONOperator struct {
	ctrl     *gomock.Controller
	recorder *MockJSONOperatorMockRecorder
	isgomock struct{}
}

// MockJSONOperatorMockRecorder is the mock recorder for MockJSONOperator.
type MockJSONOperatorMockRecorder struct {
	mock *MockJSONOperator
}

// NewMockJSONOperator creates a new mock instance.
func NewMockJSONOperator(ctrl *gomock.Controller) *MockJSONOperator {
	mock := &MockJSONOperator{ctrl: ctrl}
	mock.recorder = &MockJSONOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONOperator) EXPECT() *MockJSONOperatorMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockJSONOperator) Marshal(v any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockJSONOperatorMockRecorder) Marshal(v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Marshal", reflect.TypeOf((*MockJSONOperator)(nil).Marshal), v)
}

// MarshalIndent mocks base method.
func (m *MockJSONOperator) MarshalIndent(v any, prefix, indent string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalIndent", v, prefix, indent)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalIndent indicates an expected call of MarshalIndent.
func (mr *MockJSONOperatorMockRecorder) MarshalIndent(v, prefix, indent any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "MarshalIndent", reflect.TypeOf((*MockJSONOperator)(nil).MarshalIndent), v, prefix, indent)
}

// ReadJSON mocks base method.
func (m *MockJSONOperator) ReadJSON(path string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", path, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON.
func (mr *MockJSONOperatorMockRecorder) ReadJSON(path, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadJSON", reflect.TypeOf((*MockJSONOperator)(nil).ReadJSON), path, v)
}

// Unmarshal mocks base method.
func (m *MockJSONOperator) Unmarshal(data []byte, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockJSONOperatorMockRecorder) Unmarshal(data, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Unmarshal", reflect.TypeOf((*MockJSONOperator)(nil).Unmarshal), data, v)
}

// WriteJSON mocks base method.
func (m *MockJSONOperator) WriteJSON(path string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSON", path, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON.
func (mr *MockJSONOperatorMockRecorder) WriteJSON(path, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteJSON", reflect.TypeOf((*MockJSONOperator)(nil).WriteJSON), path, v)
}

// WriteJSONIndent mocks base method.
func (m *MockJSONOperator) WriteJSONIndent(path string, v any, prefix, indent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSONIndent", path, v, prefix, indent)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSONIndent indicates an expected call of WriteJSONIndent.
func (mr *MockJSONOperatorMockRecorder) WriteJSONIndent(path, v, prefix, indent any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteJSONIndent", reflect.TypeOf((*MockJSONOperator)(nil).WriteJSONIndent), path, v, prefix, indent)
}

// MockYAMLOperator is a mock of YAMLOperator interface.
type MockYAMLOperator struct {
	ctrl     *gomock.Controller
	recorder *MockYAMLOperatorMockRecorder
	isgomock struct{}
}

// MockYAMLOperatorMockRecorder is the mock recorder for MockYAMLOperator.
type MockYAMLOperatorMockRecorder struct {
	mock *MockYAMLOperator
}

// NewMockYAMLOperator creates a new mock instance.
func NewMockYAMLOperator(ctrl *gomock.Controller) *MockYAMLOperator {
	mock := &MockYAMLOperator{ctrl: ctrl}
	mock.recorder = &MockYAMLOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMLOperator) EXPECT() *MockYAMLOperatorMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockYAMLOperator) Marshal(v any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockYAMLOperatorMockRecorder) Marshal(v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Marshal", reflect.TypeOf((*MockYAMLOperator)(nil).Marshal), v)
}

// ReadYAML mocks base method.
func (m *MockYAMLOperator) ReadYAML(path string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadYAML", path, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadYAML indicates an expected call of ReadYAML.
func (mr *MockYAMLOperatorMockRecorder) ReadYAML(path, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadYAML", reflect.TypeOf((*MockYAMLOperator)(nil).ReadYAML), path, v)
}

// Unmarshal mocks base method.
func (m *MockYAMLOperator) Unmarshal(data []byte, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockYAMLOperatorMockRecorder) Unmarshal(data, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Unmarshal", reflect.TypeOf((*MockYAMLOperator)(nil).Unmarshal), data, v)
}

// WriteYAML mocks base method.
func (m *MockYAMLOperator) WriteYAML(path string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteYAML", path, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteYAML indicates an expected call of WriteYAML.
func (mr *MockYAMLOperatorMockRecorder) WriteYAML(path, v any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteYAML", reflect.TypeOf((*MockYAMLOperator)(nil).WriteYAML), path, v)
}

// MockSafeFileOperator is a mock of SafeFileOperator interface.
type MockSafeFileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockSafeFileOperatorMockRecorder
	isgomock struct{}
}

// MockSafeFileOperatorMockRecorder is the mock recorder for MockSafeFileOperator.
type MockSafeFileOperatorMockRecorder struct {
	mock *MockSafeFileOperator
}

// NewMockSafeFileOperator creates a new mock instance.
func NewMockSafeFileOperator(ctrl *gomock.Controller) *MockSafeFileOperator {
	mock := &MockSafeFileOperator{ctrl: ctrl}
	mock.recorder = &MockSafeFileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSafeFileOperator) EXPECT() *MockSafeFileOperatorMockRecorder {
	return m.recorder
}

// Chmod mocks base method.
func (m *MockSafeFileOperator) Chmod(path string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockSafeFileOperatorMockRecorder) Chmod(path, mode any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Chmod", reflect.TypeOf((*MockSafeFileOperator)(nil).Chmod), path, mode)
}

// Copy mocks base method.
func (m *MockSafeFileOperator) Copy(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockSafeFileOperatorMockRecorder) Copy(src, dst any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Copy", reflect.TypeOf((*MockSafeFileOperator)(nil).Copy), src, dst)
}

// Exists mocks base method.
func (m *MockSafeFileOperator) Exists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSafeFileOperatorMockRecorder) Exists(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Exists", reflect.TypeOf((*MockSafeFileOperator)(nil).Exists), path)
}

// IsDir mocks base method.
func (m *MockSafeFileOperator) IsDir(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockSafeFileOperatorMockRecorder) IsDir(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "IsDir", reflect.TypeOf((*MockSafeFileOperator)(nil).IsDir), path)
}

// MkdirAll mocks base method.
func (m *MockSafeFileOperator) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockSafeFileOperatorMockRecorder) MkdirAll(path, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "MkdirAll", reflect.TypeOf((*MockSafeFileOperator)(nil).MkdirAll), path, perm)
}

// ReadDir mocks base method.
func (m *MockSafeFileOperator) ReadDir(path string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockSafeFileOperatorMockRecorder) ReadDir(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadDir", reflect.TypeOf((*MockSafeFileOperator)(nil).ReadDir), path)
}

// ReadFile mocks base method.
func (m *MockSafeFileOperator) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockSafeFileOperatorMockRecorder) ReadFile(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "ReadFile", reflect.TypeOf((*MockSafeFileOperator)(nil).ReadFile), path)
}

// Remove mocks base method.
func (m *MockSafeFileOperator) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSafeFileOperatorMockRecorder) Remove(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Remove", reflect.TypeOf((*MockSafeFileOperator)(nil).Remove), path)
}

// RemoveAll mocks base method.
func (m *MockSafeFileOperator) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockSafeFileOperatorMockRecorder) RemoveAll(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "RemoveAll", reflect.TypeOf((*MockSafeFileOperator)(nil).RemoveAll), path)
}

// Stat mocks base method.
func (m *MockSafeFileOperator) Stat(path string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", path)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockSafeFileOperatorMockRecorder) Stat(path any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "Stat", reflect.TypeOf((*MockSafeFileOperator)(nil).Stat), path)
}

// WriteFile mocks base method.
func (m *MockSafeFileOperator) WriteFile(path string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockSafeFileOperatorMockRecorder) WriteFile(path, data, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteFile", reflect.TypeOf((*MockSafeFileOperator)(nil).WriteFile), path, data, perm)
}

// WriteFileAtomic mocks base method.
func (m *MockSafeFileOperator) WriteFileAtomic(path string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileAtomic", path, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileAtomic indicates an expected call of WriteFileAtomic.
func (mr *MockSafeFileOperatorMockRecorder) WriteFileAtomic(path, data, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteFileAtomic", reflect.TypeOf((*MockSafeFileOperator)(nil).WriteFileAtomic), path, data, perm)
}

// WriteFileWithBackup mocks base method.
func (m *MockSafeFileOperator) WriteFileWithBackup(path string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileWithBackup", path, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileWithBackup indicates an expected call of WriteFileWithBackup.
func (mr *MockSafeFileOperatorMockRecorder) WriteFileWithBackup(path, data, perm any) *gomock.Call {
	return mockrec.RecordCall(mr.mock.ctrl, mr.mock, "WriteFileWithBackup", reflect.TypeOf((*MockSafeFileOperator)(nil).WriteFileWithBackup), path, data, perm)
}
